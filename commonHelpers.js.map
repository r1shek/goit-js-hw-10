{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\n\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nlet userSelectedDate = null;\nconst startButton = document.querySelector('[data-start]');\nstartButton.disabled = true;\nconst dateTimePicker = document.querySelector('#datetime-picker');\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    userSelectedDate = selectedDates[0];\n    if (userSelectedDate < new Date()) {\n      iziToast.show({\n        title: 'Please choose a date in the future',\n        position: 'topCenter',\n      });\n      startButton.disabled = true;\n    } else {\n      startButton.disabled = false;\n    }\n  },\n};\n\nflatpickr(dateTimePicker, options);\n\nstartButton.addEventListener('click', () => {\n  startButton.disabled = true;\n  dateTimePicker.disabled = true;\n  updateTimer();\n});\n\nfunction updateTimer() {\n  const timerInterval = setInterval(() => {\n    const now = new Date();\n    const timeUntilSelectedDate = userSelectedDate - now;\n    if (timeUntilSelectedDate <= 0) {\n      clearInterval(timerInterval);\n      startButton.disabled = false;\n      dateTimePicker.disabled = false;\n      updateTimerDisplay({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n      return;\n    }\n    const time = convertMs(timeUntilSelectedDate);\n    updateTimerDisplay(time);\n  }, 1000);\n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction updateTimerDisplay(time) {\n  document.querySelector('[data-days]').textContent = formatTime(time.days);\n  document.querySelector('[data-hours]').textContent = formatTime(time.hours);\n  document.querySelector('[data-minutes]').textContent = formatTime(\n    time.minutes\n  );\n  document.querySelector('[data-seconds]').textContent = formatTime(\n    time.seconds\n  );\n}\n\nfunction formatTime(time) {\n  return String(time).padStart(2, '0');\n}\n"],"names":["userSelectedDate","startButton","dateTimePicker","options","selectedDates","iziToast","flatpickr","updateTimer","timerInterval","timeUntilSelectedDate","updateTimerDisplay","time","convertMs","ms","days","hours","minutes","seconds","formatTime"],"mappings":"sGAMA,IAAIA,EAAmB,KACvB,MAAMC,EAAc,SAAS,cAAc,cAAc,EACzDA,EAAY,SAAW,GACvB,MAAMC,EAAiB,SAAS,cAAc,kBAAkB,EAE1DC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBJ,EAAmBI,EAAc,CAAC,EAC9BJ,EAAmB,IAAI,MACzBK,EAAS,KAAK,CACZ,MAAO,qCACP,SAAU,WAClB,CAAO,EACDJ,EAAY,SAAW,IAEvBA,EAAY,SAAW,EAE1B,CACH,EAEAK,EAAUJ,EAAgBC,CAAO,EAEjCF,EAAY,iBAAiB,QAAS,IAAM,CAC1CA,EAAY,SAAW,GACvBC,EAAe,SAAW,GAC1BK,GACF,CAAC,EAED,SAASA,GAAc,CACrB,MAAMC,EAAgB,YAAY,IAAM,CAEtC,MAAMC,EAAwBT,EADlB,IAAI,KAEhB,GAAIS,GAAyB,EAAG,CAC9B,cAAcD,CAAa,EAC3BP,EAAY,SAAW,GACvBC,EAAe,SAAW,GAC1BQ,EAAmB,CAAE,KAAM,EAAG,MAAO,EAAG,QAAS,EAAG,QAAS,CAAC,CAAE,EAChE,MACD,CACD,MAAMC,EAAOC,EAAUH,CAAqB,EAC5CC,EAAmBC,CAAI,CACxB,EAAE,GAAI,CACT,CAEA,SAASC,EAAUC,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASP,EAAmBC,EAAM,CAChC,SAAS,cAAc,aAAa,EAAE,YAAcO,EAAWP,EAAK,IAAI,EACxE,SAAS,cAAc,cAAc,EAAE,YAAcO,EAAWP,EAAK,KAAK,EAC1E,SAAS,cAAc,gBAAgB,EAAE,YAAcO,EACrDP,EAAK,OACT,EACE,SAAS,cAAc,gBAAgB,EAAE,YAAcO,EACrDP,EAAK,OACT,CACA,CAEA,SAASO,EAAWP,EAAM,CACxB,OAAO,OAAOA,CAAI,EAAE,SAAS,EAAG,GAAG,CACrC"}